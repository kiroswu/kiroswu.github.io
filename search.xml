<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[MySQL最佳实践]]></title>
      <url>https://kiroswu.github.io/2016/12/06/mysql_bestpractice/</url>
      <content type="html"><![CDATA[<h2 id="优化查询的查询缓存"><a href="#优化查询的查询缓存" class="headerlink" title="优化查询的查询缓存"></a>优化查询的查询缓存</h2><p>大部分MySQL服务器都有查询缓存功能。这是提高性能的最有效的方法之一，这是由数据库引擎私下处理的。当同一个查询被多次执行，结果会直接从缓存里提取，这样速度就很快。</p>
<p>主要的问题是，这对程序员来说太简单了，不容易看到，我们很多人都容易忽略。我们实际上是可以组织查询缓存执行任务的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// query cache does NOT work</div><div class="line">$r = mysql_query(&quot;SELECT username FROM user WHERE signup_date &gt;= CURDATE()&quot;);</div><div class="line">  </div><div class="line">// query cache works!</div><div class="line">$today = date(&quot;Y-m-d&quot;);</div><div class="line">$r = mysql_query(&quot;SELECT username FROM user WHERE signup_date &gt;= &apos;$today&apos;&quot;);</div></pre></td></tr></table></figure></p>
<p>查询缓存在第一行不执行的原因在于CURDTE()功能的使用。这适用于所有的非确定性功能，就像NOW()和RAND()等等。。。因为功能返回的结果是可变的。MySQL决定禁用查询器的查询缓存。我们所需要做的是通过添加一额外一行PHP，在查询前阻止它发生。</p>
<p>##EXPLAIN你的选择查询<br>使用EXPLAIN关键词可以帮助了解MySQL是怎样运行你的查询的。这有助于发现瓶颈和查询或表结构的其它问题。</p>
<p>EXPLAIN的查询结果会展示哪一个索引被使用过，表示怎样扫描和储存的，等等。。。</p>
<p>选择一个SELECT查询（一个有连接的复杂查询会更好），在它的前面添加关键词EXPLAIN，这样就可以直接使用数据库了。结果会以一个漂亮的表来展示。例如，就好比我执行连接时忘了添加一栏的索引：</p>
<p>现在它只会从表2里面扫描9和16行，而非扫描7883行。经验法则是乘以所有“行”那一栏的数字，你的查询性能会跟结果数字成比例的。</p>
<p>##获取唯一行时使用LIMIT 1<br>有时当你查表时，你已经知道你正在查找的结果只有一行。你可能正在获取唯一记录，或者你可能只是查询是否存在满足你的WHERE子句条件的记录。</p>
<p>在这种情况下，将LIMIT 1添加到查询条件中可以提高性能。这样，数据库引擎将在找到刚刚第一个记录之后停止扫描记录，而不是遍历整个表或索引。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// do I have any users from Alabama?</div><div class="line">  </div><div class="line">// what NOT to do:</div><div class="line">$r = mysql_query(&quot;SELECT * FROM user WHERE state = &apos;Alabama&apos;&quot;);</div><div class="line">if (mysql_num_rows($r) &gt; 0) &#123;</div><div class="line">    // ...</div><div class="line">&#125;</div><div class="line">  </div><div class="line">// much better:</div><div class="line">$r = mysql_query(&quot;SELECT 1 FROM user WHERE state = &apos;Alabama&apos; LIMIT 1&quot;);</div><div class="line">if (mysql_num_rows($r) &gt; 0) &#123;</div><div class="line">    // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>##索引搜索字段<br>索引不仅仅是为了主键或唯一键。如果你会在你的表中按照任何列搜索，你就都应该索引它们。</p>
<p>正如你所看到的，这个规则也适用于如 “last_name LIKE ‘a%’”的部分字符串搜索。当从字符串的开头搜索时，MySQL就可以使用那一列的索引。</p>
<p>你也应该明白什么样搜索可以不使用有规律的索引。例如，当搜索一个单词时（例如，”WHERE post_content LIKE ‘%apple%’”），你将不会看到普通索引的好处。你最好使用 mysql 全文搜索或者构建你自己的索引解决方案。</p>
<h2 id="索引并对连接使用同样的字段类型"><a href="#索引并对连接使用同样的字段类型" class="headerlink" title="索引并对连接使用同样的字段类型"></a>索引并对连接使用同样的字段类型</h2><p>如果你的应用程序包含许多连接查询, 你需要确保连接的字段在两张表上都建立了索引。 这会影响MySQL如何内部优化连接操作。</p>
<p>此外,被连接的字段,需要使用同样类型。例如, 如果你使用一个DECIMAL字段, 连接另一张表的INT字段, MySQL将无法使用至少一个索引。 即使字符编码也需要使用相同的字符类型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// looking for companies in my state</div><div class="line">$r = mysql_query(&quot;SELECT company_name FROM users</div><div class="line">    LEFT JOIN companies ON (users.state = companies.state)</div><div class="line">    WHERE users.id = $user_id&quot;);</div><div class="line">  </div><div class="line">// both state columns should be indexed</div><div class="line">// and they both should be the same type and character encoding</div><div class="line">// or MySQL might do full table scans</div></pre></td></tr></table></figure></p>
<h2 id="不要ORDER-BY-RAND"><a href="#不要ORDER-BY-RAND" class="headerlink" title="不要ORDER BY RAND()"></a>不要ORDER BY RAND()</h2><p>起初这是一个听起来挺酷的技巧, 让许多菜鸟程序员陷入了这个陷阱。但你可能不知道，一旦你开始在查询中使用它，你创建了非常可怕的查询瓶颈。</p>
<p>如果你真的需要对结果随机排序, 这有一个更好的方法。补充一些额外代码,你将可以防止当数据成指数级增长时造成的瓶颈。关键问题是，MySQL必须在排序之前对表中的每一行执行RAND()操作（这需要处理能力），并且仅仅给出一行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// what NOT to do:</div><div class="line">$r = mysql_query(&quot;SELECT username FROM user ORDER BY RAND() LIMIT 1&quot;);</div><div class="line">  </div><div class="line">// much better:</div><div class="line">  </div><div class="line">$r = mysql_query(&quot;SELECT count(*) FROM user&quot;);</div><div class="line">$d = mysql_fetch_row($r);</div><div class="line">$rand = mt_rand(0,$d[0] - 1);</div><div class="line">  </div><div class="line">$r = mysql_query(&quot;SELECT username FROM user LIMIT $rand, 1&quot;);</div></pre></td></tr></table></figure></p>
<p>所以挑选一个小于结果数的随机数，并将其用作LIMIT子句中的偏移量。</p>
<h2 id="避免使用SELECT"><a href="#避免使用SELECT" class="headerlink" title="避免使用SELECT *"></a>避免使用SELECT *</h2><p>从数据表中读取的数据越多，查询操作速度就越慢。它增加了磁盘操作所需的时间。此外，当数据库服务器与Web服务器分开时，由于必须在服务器之间传输数据，将会有更长的网络延迟。</p>
<p>这是一个好习惯：当你使用SELECT语句时总是指定你需要的列。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// not preferred</div><div class="line">$r = mysql_query(&quot;SELECT * FROM user WHERE user_id = 1&quot;);</div><div class="line">$d = mysql_fetch_assoc($r);</div><div class="line">echo &quot;Welcome &#123;$d[&apos;username&apos;]&#125;&quot;;</div><div class="line">  </div><div class="line">// better:</div><div class="line">$r = mysql_query(&quot;SELECT username FROM user WHERE user_id = 1&quot;);</div><div class="line">$d = mysql_fetch_assoc($r);</div><div class="line">echo &quot;Welcome &#123;$d[&apos;username&apos;]&#125;&quot;;</div><div class="line">  </div><div class="line">// the differences are more significant with bigger result sets</div></pre></td></tr></table></figure></p>
<h2 id="几乎总是有一个id字段"><a href="#几乎总是有一个id字段" class="headerlink" title="几乎总是有一个id字段"></a>几乎总是有一个id字段</h2><p>在每个以id列为PRIMARY KEY的数据表中，优先选择AUTO_INCREMENT或者INT。 也可以优选使用UNSIGNED，因为该值不能为负的。</p>
<p>即使你拥有一个具有唯一用户名字段的用户表，也不要将其作为主键。 VARCHAR字段作为主键（检索）速度较慢。通过内部ID引用所有的用户数据，你的代码中将更加结构化。</p>
<p>有些后台操作是由MySQL引擎本身完成的，它在内部使用主键字段。当数据库设置越复杂（集群，分区等…），这就变得更加重要了。</p>
<p>这个规则的一个可能的例外是“关联表”，用于两个表之间的多对多类型的关联。例如，“posts_tags”表中包含两列：post_id，tag_id，用于保存表名为“post”和“tags”的两个表之间的关系。这些表可以具有包含两个id字段的PRIMARY键。</p>
<h2 id="相比VARCHAR优先使用ENUM"><a href="#相比VARCHAR优先使用ENUM" class="headerlink" title="相比VARCHAR优先使用ENUM"></a>相比VARCHAR优先使用ENUM</h2><p>ENUM枚举类型是非常快速和紧凑的。在内部它们像TINYINT一样存储，但它们可以包含和显示字符串值。这使他们成为某些领域的完美候选。</p>
<p>如果有一个字段只包含几种不同的值，请使用ENUM而不是VARCHAR。例如，它可以是名为“status”的列，并且只包含诸如“active”，“inactive”，“pending”，“expired”等的值…</p>
<p>关于如何重构你的数据表，甚至有一种方法是可以从MySQL本身得到“建议”。 当你有一个VARCHAR字段，它实际上建议你将该列类型更改为ENUM。这通过调用PROCEDURE ANALYZE()来完成。 </p>
<h2 id="用PROCEDURE-ANALYSE-获取建议"><a href="#用PROCEDURE-ANALYSE-获取建议" class="headerlink" title="用PROCEDURE ANALYSE()获取建议"></a>用PROCEDURE ANALYSE()获取建议</h2><p>PROCEDURE ANALYSE() 将使用MySQL分析列结构和表中的实际数据，为你提供一些建议。它只有在数据表中有实际数据时才有用，因为这在分析决策时很重要。<br>例如，如果你创建了一个INT类型的主键，但没有太多行，MySQL则可能建议您改用MEDIUMINT。或者如果你使用VARCHAR字段，如果表里只有很少的取值，你可能会得到一个建议是将其转换为ENUM。<br>你也可以在其中一个表视图中单击phpmyadmin中的“建议表结构”链接来执行此操作。<br>请记住，这些只是建议。 如果你的数据表变得越来越大，他们甚至可能不是正确的建议。至于如何修改最终是你来决定。</p>
<h2 id="如果可以的话使用NOT-NULL"><a href="#如果可以的话使用NOT-NULL" class="headerlink" title="如果可以的话使用NOT NULL"></a>如果可以的话使用NOT NULL</h2><p>除非你有非常重要的理由使用NULL值，否则你应该设置你的列为NOT NULL。<br>首先，问一下你自己在空字符串值和NULL值之间（对应INT字段：0 vs. NULL）是否有任何的不同.如果没有理由一起使用这两个，那么你就不需要一个NULL字段（你知道在Oracle中NULL和空字符串是一样的吗？）。<br>NULL列需要额外的空间，他们增加了你的比较语句的复杂度。如果可以的话尽量避免它们。当然，我理解一些人，他们也许有非常重要的理由使用NULL值，这不总是一件坏事。<br>摘自MySQL 文档：<br>“NULL列在行记录它们的值是否为NULL时需要额外的空间。例如MyISAM 表，每一个NULL列拥有额外的一个比特，聚集在最近的字节。”</p>
<h2 id="预处理语句"><a href="#预处理语句" class="headerlink" title="预处理语句"></a>预处理语句</h2><p>使用预处理语句有诸多好处，包括更高的性能和更好的安全性。<br>预处理语句默认情况下会过滤绑定到它的变量，这对于避免SQL注入攻击极为有效。当然你也可以指定要过滤的变量。但这些方法更容易出现人为错误，也更容易被程序员遗忘。这在使用框架或 ORM 的时候会出现一些问题。<br>既然我们关注性能，那就应该说说这个方面的好处。当在应用中多次使用同一个查询的时候，它的好处特别明显。既然向同一个预备好的语句中传入不同的参数值，MySQL 对这个语句也只会进行一次解析。<br>同时，最新版本的 MySQL 在传输预备好的语句时会采用二进制形式，这样做的作用非常明显，而且对减少网络延迟很有帮助。<br>曾经有一段时间，许多程序员为了一个重要的原因则避免使用预处理语句。这个原因就是，它们不会被MySQL 缓存。不过在 5.1 版本的某个时候，查询缓存也得到的支持。<br>想在 PHP 中使用预处理语句，你可以看看 mysqli 扩展 或使用数据抽象层，如 PDO。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"> // create a prepared statement</div><div class="line">if ($stmt = $mysqli-&gt;prepare(&quot;SELECT username FROM user WHERE state=?&quot;)) &#123;</div><div class="line">  </div><div class="line">    // bind parameters</div><div class="line">    $stmt-&gt;bind_param(&quot;s&quot;, $state);</div><div class="line">  </div><div class="line">    // execute</div><div class="line">    $stmt-&gt;execute();</div><div class="line">  </div><div class="line">    // bind result variables</div><div class="line">    $stmt-&gt;bind_result($username);</div><div class="line">  </div><div class="line">    // fetch value</div><div class="line">    $stmt-&gt;fetch();</div><div class="line">  </div><div class="line">    printf(&quot;%s is from %s\n&quot;, $username, $state);</div><div class="line">  </div><div class="line">    $stmt-&gt;close();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="无缓冲查询"><a href="#无缓冲查询" class="headerlink" title="无缓冲查询"></a>无缓冲查询</h2><p>通常当你从脚本执行一个查询，在它可以继续后面的任务之前将需要等待查询执行完成。你可以使用无缓冲的查询来改变这一情况。<br>在PHP 文档中对  mysql_unbuffered_query() f函数有一个很好的解释：<br>“<br> “mysql_unbuffered_query() 发送SQL查询语句到MySQL不会像 mysql_query()那样自动地取并缓冲结果行。这让产生大量结果集的查询节省了大量的内存，在第一行已经被取回时你就可以立即在结果集上继续工作，而不用等到SQL查询被执行完成。”<br>然而，它有一定的局限性。你必须在执行另一个查询之前读取所有的行或调用mysql_free_result() 。另外你不能在结果集上使用mysql_num_rows() 或 mysql_data_seek() 。</p>
<h2 id="使用-UNSIGNED-INT-存储IP地址"><a href="#使用-UNSIGNED-INT-存储IP地址" class="headerlink" title="使用 UNSIGNED INT 存储IP地址"></a>使用 UNSIGNED INT 存储IP地址</h2><p>很多程序员没有意识到可以使用整数类型的字段来存储 IP 地址，所以一直使用 VARCHAR(15) 类型的字段。使用 INT 只需要 4 个字节的空间，而且字段长度固定。</p>
<p>必须确保列是 UNSINGED INT 类型，因为 IP 地址可能会用到 32 位无符号整型数据的每一个位。</p>
<p>在查询中可以使用 INET_ATON() 来把一个IP转换为整数，用 INET_NTOA() 来进行相反的操作。在 PHP 也有类似的函数，ip2long() 和 long2ip()。<br>$r = “UPDATE users SET ip = INET_ATON(‘{$_SERVER[‘REMOTE_ADDR’]}’) WHERE user_id = $user_id”;</p>
<h2 id="固定长度（静态）的表会更快"><a href="#固定长度（静态）的表会更快" class="headerlink" title="固定长度（静态）的表会更快"></a>固定长度（静态）的表会更快</h2><p>（译者注：这里提到的表的长度，实际是指表头的长度，即表中每条数据占用的空间大小，而不是指表的数据量）</p>
<p>如果表中所有列都是“固定长度”，那么这个表被认为是“静态”或“固定长度”的。不固定的列类型包括 VARCHAR、TEXT、BLOB等。即使表中只包含一个这些类型的列，这个表就不再是固定长度的，MySQL 引擎会以不同的方式来处理它。<br>固定长度的表会提高性能，因为 MySQL 引擎在记录中检索的时候速度会更快。如果想读取表中的某一地，它可以直接计算出这一行的位置。如果行的大小不固定，那就需要在主键中进行检索。</p>
<p>它们也易于缓存，崩溃后容易重建。不过它们也会占用更多空间。例如，如果你把一个 VARCHAR(20) 的字符改为 CHAR(20) 类型，它会总是占用 20 个字节，不管里面存的是什么内容。</p>
<p>你可以使用“垂直分区”技术，将长度变化的列拆分到另一张表中。来看看：</p>
<h2 id="垂直分区"><a href="#垂直分区" class="headerlink" title="垂直分区"></a>垂直分区</h2><p>垂直分区是为了优化表结构而对其进行纵向拆分的行为。</p>
<p>示例 1: 你可能会有一张用户表，包含家庭住址，而这个不是一个常用数据。这时候你可以选择把表拆分开，将住址信息保存到另一个表中。这样你的主用户表就会更小。如你所知，表越小越快。</p>
<p>示例 2: 表中有一个 “last_login” 字段，用户每次登录网站都会更新这个字段，而每次更新都会导致这个表缓存的查询数据被清空。这种情况下你可以将那个字段放到另一张表里，保持用户表更新量最小。</p>
<p>不过你也需要确保不会经常联合查询分开后的两张表，要不然你就得忍受由这带来的性能下降。</p>
<h2 id="拆分大型DELETE或INSERT语句"><a href="#拆分大型DELETE或INSERT语句" class="headerlink" title="拆分大型DELETE或INSERT语句"></a>拆分大型DELETE或INSERT语句</h2><p>如果你需要在网站上执行大型DELETE或INSERT查询，则需要注意不要影响网络流量。当执行大型语句时，它会锁表并使你的Web应用程序停止。<br>Apach运行许多并行进程/线程。 因此它执行脚本效率很高。所以服务器不期望打开过多的连接和进程，这很消耗资源，特别是内存。</p>
<p>如果你锁表很长时间（如30秒或更长），在一个高流量的网站，会导致进程和查询堆积，处理这些进程和查询可能需要很长时间，最终甚至使你的网站崩溃。<br>如果你的维护脚本需要删除大量的行，只需使用LIMIT子句，以避免阻塞。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">while (1) &#123;</div><div class="line">    mysql_query(&quot;DELETE FROM logs WHERE log_date &lt;= &apos;2009-10-01&apos; LIMIT 10000&quot;);</div><div class="line">    if (mysql_affected_rows() == 0) &#123;</div><div class="line">        // done deleting</div><div class="line">        break;</div><div class="line">    &#125;</div><div class="line">    // you can even pause a bit</div><div class="line">    usleep(50000);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="越少的列越快"><a href="#越少的列越快" class="headerlink" title="越少的列越快"></a>越少的列越快</h2><p>对于数据库引擎，磁盘可能是最重要的瓶颈。更小更紧凑的数据、减少磁盘传输量，通常有助于性能提高。</p>
<p>MySQL文档Storage Requirements 有所有数据类型清单。</p>
<p>如果已知表具有很少的行，则没有理由是主键类型为INT，可以用MEDIUMINT、SMALLINT代替，甚至在某些情况下使用TINYINT。 如果不需要完整时间记录，请使用DATE而不是DATETIME。</p>
<p>确保留下合理的扩展空间，不然你可能会像Slashdot这样。</p>
<h2 id="选择正确的存储引擎"><a href="#选择正确的存储引擎" class="headerlink" title="选择正确的存储引擎"></a>选择正确的存储引擎</h2><p>MySQL有两个主要存储引擎，MyISAM和InnoDB。 每个都有自己的优点和缺点。</p>
<p>MyISAM适用于读取繁重的应用程序，但是当有很多写入时它不能很好地扩展。 即使你正在更新一行的一个字段，整个表也被锁定，并且在语句执行完成之前，其他进程甚至无法读取该字段。 MyISAM在计算SELECT COUNT（*）的查询时非常快。</p>
<p>InnoDB是一个更复杂的存储引擎，对于大多数小的应用程序，它比MyISAM慢。 但它支持基于行的锁定，使其更好地扩展。 它还支持一些更高级的功能，比如事务。</p>
<ul>
<li>MyISAM存储引擎</li>
<li>InnoDB存储引擎</li>
</ul>
<h2 id="使用对象关系映射器（ORM-Object-Relational-Mapper）"><a href="#使用对象关系映射器（ORM-Object-Relational-Mapper）" class="headerlink" title="使用对象关系映射器（ORM, Object Relational Mapper）"></a>使用对象关系映射器（ORM, Object Relational Mapper）</h2><p>通过使用ORM（对象关系映射器），你可以获得一定的性能提升。ORM可以完成的一切事情，手动编码也可完成。但这可能意味着需要太多额外的工作，并且需要高水平的专业知识。</p>
<p>ORM以“延迟加载”著称。这意味着它们仅在需要时获取实际值。但是你需要小心处理他们，否则你可能最终创建了许多微型查询，这会降低数据库性能。</p>
<p>ORM还可以将多个查询批处理到事务中，其操作速度比向数据库发送单个查询快得多。</p>
<p>目前我最喜欢的PHP-ORM是Doctrine。我写了一篇关于如何安装Doctrine与CodeIgniter的文章（install Doctrine with CodeIgniter）。</p>
<h2 id="小心使用持久连接"><a href="#小心使用持久连接" class="headerlink" title="小心使用持久连接"></a>小心使用持久连接</h2><p>持久连接意味着减少重建连接到MySQL的成本。 当持久连接被创建时，它将保持打开状态直到脚本完成运行。 因为Apache重用它的子进程，下一次进程运行一个新的脚本时，它将重用相同的MySQL连接。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">● PHP：mysql_pconnect()</div></pre></td></tr></table></figure></p>
<p>理论上看起来不错。 但从我个人（和许多其他人）的经验看来，这个功能可能会导致更多麻烦。 你可能会出现连接数限制问题、内存问题等等。</p>
<p>Apache总是并行运行的，它创建许多子进程。 这是持久连接在这种环境中不能很好工作的主要原因。 在你考虑使用mysql_pconnect()之前，请咨询你的系统管理员。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat性能调优]]></title>
      <url>https://kiroswu.github.io/2016/12/05/Tomcat_performance_optimization/</url>
      <content type="html"><![CDATA[<h3 id="一、总结前一天的学习"><a href="#一、总结前一天的学习" class="headerlink" title="一、总结前一天的学习"></a>一、总结前一天的学习</h3><p>我们得知了决定性能测试的几个重要指标，它们是：</p>
<ul>
<li>吞吐量</li>
<li>Responsetime</li>
<li>Cpuload</li>
<li>MemoryUsage<br>我们也在第三天的学习中对Apache做过了一定的优化，使其最优化上述4大核心指标的读数，那么我们的Apache调优了，我们的Tomcat也作些相应的调整，当完成今的课程后，到时你的“小猫”到时真的会“飞”起来的，所以请用心看完，这篇文章向那位曾写过“Tomcat如何承受1000个用户”的作都的敬，一方面又是这篇原文的一个扩展，因为在把原文的知识用到相关的两个大工程中去后解决了：</li>
</ul>
<ol>
<li>承受更大并发用户数</li>
<li>取得了良好的性能与改善（系统平均性能提升达20倍，极端一个交易达80倍）。<br>另外值的一提的是，我们当时工程里用的“小猫”是跑在32位机下的， 也就是我们的JVM最大受到2GB内存的限制，都已经跑成“飞”了。。。。。。如果在64位机下跑这头“小猫”。。。。。。大家可想而知，会得到什么样的效果呢？下面就请请详细的设置吧！</li>
</ol>
<h3 id="二、一切基于JVM（内存）的优化"><a href="#二、一切基于JVM（内存）的优化" class="headerlink" title="二、一切基于JVM（内存）的优化"></a>二、一切基于JVM（内存）的优化</h3><h4 id="32位操作系统与64位操作系统中JVM的对比"><a href="#32位操作系统与64位操作系统中JVM的对比" class="headerlink" title="32位操作系统与64位操作系统中JVM的对比"></a>32位操作系统与64位操作系统中JVM的对比</h4><p>我们一般的开发人员，基本用的是都是32位的Windows系统，这就导致了一个严重的问题即：32位windows系统对内存限制，下面先来看一个比较的表格：</p>
<p>操作系统<br>操作系统位数<br>内存限制<br>解决办法<br>Winxp<br>32<br>4GB<br>超级兔子<br>Win7<br>32<br>4GB<br>可以通过设置/PAE<br>Win2003<br>32<br>可以突破4GB达16GB<br>必需要装win2003 advanced server且要打上sp2补丁<br>Win7<br>64<br>无限制<br>机器能插多少内存，系统内存就能支持到多大<br>Win2003<br>64<br>无限制<br>机器能插多少内存，系统内存就能支持到多大<br>Linux<br>64<br>无限制<br>机器能插多少内存，系统内存就能支持到多大<br>Unix<br>64<br>无限制<br>机器能插多少内存，系统内存就能支持到多大<br>上述问题解决后，我们又碰到一个新的问题，32位系统下JVM对内存的限制：不能突破2GB内存，即使你在Win2003 Advanced Server下你的机器装有8GB-16GB的内存，而你的Java，只能用到2GB的内存。<br>其实我一直很想推荐大家使用Linux或者是Mac操作系统的，而且要装64位，因为必竟我们是开发用的不是打游戏用的，而Java源自Unix归于Unix（Linux只是运行在PC上的Unix而己）。<br>所以很多开发人员运行在win32位系统上更有甚者在生产环境下都会布署win32位的系统，那么这时你的Tomcat要优化，就要讲究点技巧了。而在64位操作系统上无论是系统内存还是JVM都没有受到2GB这样的限制。<br>Tomcat的优化分成两块：<br>ü   Tomcat启动命令行中的优化参数即JVM优化<br>ü   Tomcat容器自身参数的优化（这块很像ApacheHttp Server）<br>这一节先要讲的是Tomcat启动命令行中的优化参数。<br>Tomcat首先跑在JVM之上的，因为它的启动其实也只是一个java命令行，首先我们需要对这个JAVA的启动命令行进行调优。<br>需要注意的是：<br>这边讨论的JVM优化是基于Oracle Sun的jdk1.6版有以上，其它JDK或者低版本JDK不适用。</p>
<h4 id="Tomcat启动行参数的优化"><a href="#Tomcat启动行参数的优化" class="headerlink" title="Tomcat启动行参数的优化"></a>Tomcat启动行参数的优化</h4><p>Tomcat 的启动参数位于tomcat的安装目录\bin目录下，如果你是Linux操作系统就是catalina.sh文件，如果你是Windows操作系统那么你需要改动的就是catalina.bat文件。打开该文件，一般该文件头部是一堆的由##包裹着的注释文字，找到注释文字的最后一段如：</p>
<p>敲入一个回车，加入如下的参数<br><strong>Linux系统中tomcat的启动参数</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export JAVA_OPTS=&quot;-server -Xms1400M -Xmx1400M -Xss512k -XX:+AggressiveOpts -XX:+UseBiasedLocking -XX:PermSize=128M -XX:MaxPermSize=256M -XX:+DisableExplicitGC -XX:MaxTenuringThreshold=31 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC  -XX:+CMSParallelRemarkEnabled -XX:+UseCMSCompactAtFullCollection -XX:LargePageSizeInBytes=128m  -XX:+UseFastAccessorMethods -XX:+UseCMSInitiatingOccupancyOnly -Djava.awt.headless=true &quot;</div></pre></td></tr></table></figure>
<p><strong>Windows系统中tomcat的启动参数</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set JAVA_OPTS=-server -Xms1400M -Xmx1400M -Xss512k -XX:+AggressiveOpts -XX:+UseBiasedLocking -XX:PermSize=128M -XX:MaxPermSize=256M -XX:+DisableExplicitGC -XX:MaxTenuringThreshold=31 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC  -XX:+CMSParallelRemarkEnabled -XX:+UseCMSCompactAtFullCollection -XX:LargePageSizeInBytes=128m  -XX:+UseFastAccessorMethods -XX:+UseCMSInitiatingOccupancyOnly -Djava.awt.headless=true</div></pre></td></tr></table></figure></p>
<p>上面参数好多啊，可能有人写到现在都没见一个tomcat的启动命令里加了这么多参数，当然，这些参数只是我机器上的，不一定适合你，尤其是参数后的value（值）是需要根据你自己的实际情况来设置的。<br>参数解释：<br><strong>ü   -server</strong><br>我不管你什么理由，只要你的tomcat是运行在生产环境中的，这个参数必须给我加上<br>因为tomcat默认是以一种叫java –client的模式来运行的，server即意味着你的tomcat是以真实的production的模式在运行的，这也就意味着你的tomcat以server模式运行时将拥有：更大、更高的并发处理能力，更快更强捷的JVM垃圾回收机制，可以获得更多的负载与吞吐量。。。更。。。还有更。。。<br>Y给我记住啊，要不然这个-server都不加，那是要打屁股了。<br><strong>ü   -Xms–Xmx</strong><br>即JVM内存设置了，把Xms与Xmx两个值设成一样是最优的做法，有人说Xms为最小值，Xmx为最大值不是挺好的，这样设置还比较人性化，科学化。人性？科学？你个头啊。<br>大家想一下这样的场景：<br>一个系统随着并发数越来越高，它的内存使用情况逐步上升，上升到最高点不能上升了，开始回落，你们不要认为这个回落就是好事情，由其是大起大落，在内存回落时它付出的代价是CPU高速开始运转进行垃圾回收，此时严重的甚至会造成你的系统出现“卡壳”就是你在好好的操作，突然网页像死在那边一样几秒甚至十几秒时间，因为JVM正在进行垃圾回收。<br>因此一开始我们就把这两个设成一样，使得Tomcat在启动时就为最大化参数充分利用系统的效率，这个道理和jdbcconnection pool里的minpool size与maxpool size的需要设成一个数量是一样的原理。<br>如何知道我的JVM能够使用最大值啊？拍脑袋？不行！<br>在设这个最大内存即Xmx值时请先打开一个命令行，键入如下的命令：</p>
<p>看，能够正常显示JDK的版本信息，说明，这个值你能够用。不是说32位系统下最高能够使用2GB内存吗？即：2048m，我们不防来试试</p>
<p>可以吗？不可以！不要说2048m呢，我们小一点，试试1700m如何</p>
<p>嘿嘿，连1700m都不可以，更不要说2048m了呢，2048m只是一个理论数值，这样说吧我这边有几台机器，有的机器-Xmx1800都没问题，有的机器最高只能到-Xmx1500m。<br>因此在设这个-Xms与-Xmx值时一定一定记得先这样测试一下，要不然直接加在tomcat启动命令行中你的tomcat就再也起不来了，要飞是飞不了，直接成了一只瘟猫了。<br><strong>ü   –Xmn</strong><br>设置年轻代大小为512m。整个堆大小=年轻代大小 + 年老代大小 + 持久代大小。持久代一般固定大小为64m，所以增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。<br><strong>ü   -Xss</strong><br>是指设定每个线程的堆栈大小。这个就要依据你的程序，看一个线程 大约需要占用多少内存，可能会有多少线程同时运行等。一般不易设置超过1M，要不然容易出现out ofmemory。<br><strong>ü   -XX:+AggressiveOpts</strong><br>作用如其名（aggressive），启用这个参数，则每当JDK版本升级时，你的JVM都会使用最新加入的优化技术（如果有的话）<br><strong>ü   -XX:+UseBiasedLocking</strong><br>启用一个优化了的线程锁，我们知道在我们的appserver，每个http请求就是一个线程，有的请求短有的请求长，就会有请求排队的现象，甚至还会出现线程阻塞，这个优化了的线程锁使得你的appserver内对线程处理自动进行最优调配。<br><strong>ü   -XX:PermSize=128M-XX:MaxPermSize=256M</strong><br>JVM使用-XX:PermSize设置非堆内存初始值，默认是物理内存的1/64；<br>在数据量的很大的文件导出时，一定要把这两个值设置上，否则会出现内存溢出的错误。<br>由XX:MaxPermSize设置最大非堆内存的大小，默认是物理内存的1/4。<br>那么，如果是物理内存4GB，那么64分之一就是64MB，这就是PermSize默认值，也就是永生代内存初始大小；<br>四分之一是1024MB，这就是MaxPermSize默认大小。<br><strong>ü   -XX:+DisableExplicitGC</strong><br>在程序代码中不允许有显示的调用”System.gc()”。看到过有两个极品工程中每次在DAO操作结束时手动调用System.gc()一下，觉得这样做好像能够解决它们的out ofmemory问题一样，付出的代价就是系统响应时间严重降低，就和我在关于Xms,Xmx里的解释的原理一样，这样去调用GC导致系统的JVM大起大落，性能不到什么地方去哟！<br><strong>ü   -XX:+UseParNewGC</strong><br>对年轻代采用多线程并行回收，这样收得快。<br><strong>ü   -XX:+UseConcMarkSweepGC</strong><br>即CMS gc，这一特性只有jdk1.5即后续版本才具有的功能，它使用的是gc估算触发和heap占用触发。<br>我们知道频频繁的GC会造面JVM的大起大落从而影响到系统的效率，因此使用了CMS GC后可以在GC次数增多的情况下，每次GC的响应时间却很短，比如说使用了CMS GC后经过jprofiler的观察，GC被触发次数非常多，而每次GC耗时仅为几毫秒。<br><strong>ü   -XX:MaxTenuringThreshold</strong><br>设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概率。<br>这个值的设置是根据本地的jprofiler监控后得到的一个理想的值，不能一概而论原搬照抄。<br><strong>ü   -XX:+CMSParallelRemarkEnabled</strong><br>在使用UseParNewGC 的情况下, 尽量减少 mark 的时间<br>ü   -XX:+UseCMSCompactAtFullCollection<br>在使用concurrent gc 的情况下, 防止 memoryfragmention, 对live object 进行整理, 使 memory 碎片减少。<br>ü   -XX:LargePageSizeInBytes<br>指定 Java heap的分页页面大小<br>ü   -XX:+UseFastAccessorMethods<br>get,set 方法转成本地代码<br>ü   -XX:+UseCMSInitiatingOccupancyOnly<br>指示只有在 oldgeneration 在使用了初始化的比例后concurrent collector 启动收集<br>ü   -XX:CMSInitiatingOccupancyFraction=70<br>CMSInitiatingOccupancyFraction，这个参数设置有很大技巧，基本上满足(Xmx-Xmn)<em>(100- CMSInitiatingOccupancyFraction)/100&gt;=Xmn就不会出现promotion failed。在我的应用中Xmx是6000，Xmn是512，那么Xmx-Xmn是5488兆，也就是年老代有5488 兆，CMSInitiatingOccupancyFraction=90说明年老代到90%满的时候开始执行对年老代的并发垃圾回收（CMS），这时还 剩10%的空间是5488</em>10%=548兆，所以即使Xmn（也就是年轻代共512兆）里所有对象都搬到年老代里，548兆的空间也足够了，所以只要满 足上面的公式，就不会出现垃圾回收时的promotion failed；<br>因此这个参数的设置必须与Xmn关联在一起。<br>ü   -Djava.awt.headless=true<br>这个参数一般我们都是放在最后使用的，这全参数的作用是这样的，有时我们会在我们的J2EE工程中使用一些图表工具如：jfreechart，用于在web网页输出GIF/JPG等流，在winodws环境下，一般我们的app server在输出图形时不会碰到什么问题，但是在linux/unix环境下经常会碰到一个exception导致你在winodws开发环境下图片显示的好好可是在linux/unix下却显示不出来，因此加上这个参数以免避这样的情况出现。<br>上述这样的配置，基本上可以达到：</p>
<ul>
<li>ü   系统响应时间增快</li>
<li>ü   JVM回收速度增快同时又不影响系统的响应率</li>
<li>ü   JVM内存最大化利用</li>
<li>ü   线程阻塞情况最小化</li>
<li>2.3 Tomcat容器内的优化<br>前面我们对Tomcat启动时的命令进行了优化，增加了系统的JVM可使用数、垃圾回收效率与线程阻塞情况、增加了系统响应效率等还有一个很重要的指标，我们没有去做优化，就是吞吐量。<br>还记得我们在第三天的学习中说的，这个系统本身可以处理1000，你没有优化和配置导致它默认只能处理25。因此下面我们来看Tomcat容器内的优化。<br>打开tomcat安装目录\conf\server.xml文件，定位到这一行：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt; Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</div></pre></td></tr></table></figure>
<p>这一行就是我们的tomcat容器性能参数设置的地方，它一般都会有一个默认值，这些默认值是远远不够我们的使用的，我们来看经过更改后的这一段的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt; Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</div><div class="line">          URIEncoding=&quot;UTF-8&quot;  minSpareThreads=&quot;25&quot; maxSpareThreads=&quot;75&quot;</div><div class="line">          enableLookups=&quot;false&quot; disableUploadTimeout=&quot;true&quot; connectionTimeout=&quot;20000&quot;</div><div class="line">          acceptCount=&quot;300&quot;  maxThreads=&quot;300&quot; maxProcessors=&quot;1000&quot; minProcessors=&quot;5&quot;</div><div class="line">          useURIValidationHack=&quot;false&quot;</div><div class="line">                                               compression=&quot;on&quot; compressionMinSize=&quot;2048&quot;</div><div class="line">                                               compressableMimeType=&quot;text/html,text/xml,text/JavaScript,text/css,text/plain&quot;</div><div class="line">               redirectPort=&quot;8443&quot;</div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<p>好大一陀唉。。。。。。<br>没关系，一个个来解释<br>ü   URIEncoding=”UTF-8”<br>使得tomcat可以解析含有中文名的文件的url，真方便，不像apache里还有搞个mod_encoding，还要手工编译<br>ü   maxSpareThreads<br>maxSpareThreads 的意思就是如果空闲状态的线程数多于设置的数目，则将这些线程中止，减少这个池中的线程总数。<br>ü   minSpareThreads<br>最小备用线程数，tomcat启动时的初始化的线程数。<br>ü   enableLookups<br>这个功效和Apache中的HostnameLookups一样，设为关闭。<br>ü   connectionTimeout<br>connectionTimeout为网络连接超时时间毫秒数。<br>ü   maxThreads<br>maxThreads Tomcat使用线程来处理接收的每个请求。这个值表示Tomcat可创建的最大的线程数，即最大并发数。</p>
<p>ü   acceptCount<br>acceptCount是当线程数达到maxThreads后，后续请求会被放入一个等待队列，这个acceptCount是这个队列的大小，如果这个队列也满了，就直接refuse connection</p>
<p>ü   maxProcessors与minProcessors<br>在 Java中线程是程序运行时的路径，是在一个程序中与其它控制线程无关的、能够独立运行的代码段。它们共享相同的地址空间。多线程帮助程序员写出CPU最 大利用率的高效程序，使空闲时间保持最低，从而接受更多的请求。<br>通常Windows是1000个左右，Linux是2000个左右。<br>ü   useURIValidationHack<br>我们来看一下tomcat中的一段源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">security</div><div class="line">        if (connector.getUseURIValidationHack()) &#123;</div><div class="line">            String uri = validate(request.getRequestURI());</div><div class="line">            if (uri == null) &#123;</div><div class="line">                res.setStatus(400);</div><div class="line">                res.setMessage(&quot;Invalid URI&quot;);</div><div class="line">                throw new IOException(&quot;Invalid URI&quot;);</div><div class="line">            &#125; else &#123;</div><div class="line">                req.requestURI().setString(uri);</div><div class="line">                // Redoing the URI decoding</div><div class="line">                req.decodedURI().duplicate(req.requestURI());</div><div class="line">                req.getURLDecoder().convert(req.decodedURI(), true);</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>可以看到如果把useURIValidationHack设成”false”，可以减少它对一些url的不必要的检查从而减省开销。<br>ü   enableLookups=”false”<br>为了消除DNS查询对性能的影响我们可以关闭DNS查询，方式是修改server.xml文件中的enableLookups参数值。<br>ü   disableUploadTimeout<br>类似于Apache中的keeyalive一样<br>ü   给Tomcat配置gzip压缩(HTTP压缩)功能<br>compression=”on” compressionMinSize=”2048”<br>compressableMimeType=”text/html,text/xml,text/javascript,text/css,text/plain”<br>HTTP 压缩可以大大提高浏览网站的速度，它的原理是，在客户端请求网页后，从服务器端将网页文件压缩，再下载到客户端，由客户端的浏览器负责解压缩并浏览。相对于普通的浏览过程HTML,CSS,Javascript , Text ，它可以节省40%左右的流量。更为重要的是，它可以对动态生成的，包括CGI、PHP , JSP , ASP , Servlet,SHTML等输出的网页也能进行压缩，压缩效率惊人。</p>
<ol>
<li>compression=”on” 打开压缩功能</li>
<li>compressionMinSize=”2048” 启用压缩的输出内容大小，这里面默认为2KB</li>
<li>noCompressionUserAgents=”gozilla, traviata” 对于以下的浏览器，不启用压缩</li>
<li>compressableMimeType=”text/html,text/xml”　压缩类型</li>
</ol>
<p>最后不要忘了把8443端口的地方也加上同样的配置，因为如果我们走https协议的话，我们将会用到8443端口这个段的配置，对吧？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;!--enable tomcat ssl--&gt;</div><div class="line">    &lt;Connector port=&quot;8443&quot; protocol=&quot;HTTP/1.1&quot;</div><div class="line">               URIEncoding=&quot;UTF-8&quot;  minSpareThreads=&quot;25&quot; maxSpareThreads=&quot;75&quot;</div><div class="line">          enableLookups=&quot;false&quot; disableUploadTimeout=&quot;true&quot; connectionTimeout=&quot;20000&quot;</div><div class="line">          acceptCount=&quot;300&quot;  maxThreads=&quot;300&quot; maxProcessors=&quot;1000&quot; minProcessors=&quot;5&quot;</div><div class="line">          useURIValidationHack=&quot;false&quot;</div><div class="line">                    compression=&quot;on&quot; compressionMinSize=&quot;2048&quot;</div><div class="line">                    compressableMimeType=&quot;text/html,text/xml,text/javascript,text/css,text/plain&quot;</div><div class="line">                SSLEnabled=&quot;true&quot;</div><div class="line">           scheme=&quot;https&quot; secure=&quot;true&quot;</div><div class="line">           clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot;</div><div class="line">           keystoreFile=&quot;d:/tomcat2/conf/shnlap93.jks&quot; keystorePass=&quot;aaaaaa&quot;</div><div class="line">      /&gt;</div></pre></td></tr></table></figure></p>
<p>好了，所有的Tomcat优化的地方都加上了。结合第三天中的Apache的性能优化，我们这个架构可以“飞奔”起来了，当然这边把有提及任何关于数据库优化的步骤，但仅凭这两步，我们的系统已经有了很大的提升。<br>举个真实的例子：上一个项目，经过4轮performance testing，第一轮进行了问题的定位，第二轮就是进行了apache+tomcat/weblogic的优化，第三轮是做集群优化，第四轮是sql与codes的优化。<br>在到达第二轮时，我们的性能已经提升了多少倍呢？我们来看一个loaderrunner的截图吧：</p>
<p>左边第一列是第一轮没有经过任何调优的压力测试报告。<br>右边这一列是经过了apache优化，tomcat优化后得到的压力测试报告。<br>大家看看，这就提高了多少倍？这还只是在没有改动代码的情况下得到的改善，现在明白了好好的调优一<br>个apache和tomcat其实是多么的重要了？如果加上后面的代码、SQL的调优、数据库的调优。。。。。。所以我在上一个工程中有单笔交易性能（无论是吞吐量、响应时间）提高了80倍这样的极端例子的存在。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[深入理解Java 8 Lambda]]></title>
      <url>https://kiroswu.github.io/2016/10/18/Java8_lambda/</url>
      <content type="html"><![CDATA[<h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><p>本文介绍了Java SE 8中新引入的lambda语言特性以及这些特性背后的设计思想。这些特性包括：</p>
<p>lambda表达式（又被成为“闭包”或“匿名方法”）<br>方法引用和构造方法引用<br>扩展的目标类型和类型推导<br>接口中的默认方法和静态方法</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Java是一门面向对象编程语言。面向对象编程语言和函数式编程语言中的基本元素（Basic Values）都可以动态封装程序行为：面向对象编程语言使用带有方法的对象封装行为，函数式编程语言使用函数封装行为。但这个相同点并不明显，因为Java的对象往往比较“重量级”：实例化一个类型往往会涉及不同的类，并需要初始化类里的字段和方法。</p>
<p>不过有些Java对象只是对单个函数的封装。例如下面这个典型用例：Java API中定义了一个接口（一般被称为回调接口），用户通过提供这个接口的实例来传入指定行为，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public interface ActionListener &#123;</div><div class="line">  void actionPerformed(ActionEvent e);</div><div class="line">&#125;</div><div class="line">这里并不需要专门定义一个类来实现ActionListener接口，因为它只会在调用处被使用一次。用户一般会使用匿名类型把行为内联（inline）：</div><div class="line"></div><div class="line">button.addActionListener(new ActionListener) &#123;</div><div class="line">  public void actionPerformed(ActionEvent e) &#123;</div><div class="line">    ui.dazzle(e.getModifiers());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>很多库都依赖于上面的模式。对于并行API更是如此，因为我们需要把待执行的代码提供给并行API，并行编程是一个非常值得研究的领域，因为在这里摩尔定律得到了重生：尽管我们没有更快的CPU核心（core），但是我们有更多的CPU核心。而串行API就只能使用有限的计算能力。</p>
<p>随着回调模式和函数式编程风格的日益流行，我们需要在Java中提供一种尽可能轻量级的将代码封装为数据（Model code as data）的方法。匿名内部类并不是一个好的选择，因为：</p>
<p>语法过于冗余<br>匿名类中的this和变量名容易使人产生误解<br>类型载入和实例创建语义不够灵活<br>无法捕获非final的局部变量<br>无法对控制流进行抽象<br>上面的多数问题均在Java SE 8中得以解决：</p>
<p>通过提供更简洁的语法和局部作用域规则，Java SE 8彻底解决了问题1和问题2<br>通过提供更加灵活而且便于优化的表达式语义，Java SE 8绕开了问题3<br>通过允许编译器推断变量的“常量性”（finality），Java SE 8减轻了问题4带来的困扰<br>不过，Java SE 8的目标并非解决所有上述问题。因此捕获可变变量（问题4）和非局部控制流（问题5）并不在Java SE 8的范畴之内。（尽管我们可能会在未来提供对这些特性的支持）</p>
<p>##函数式接口</p>
<p>尽管匿名内部类有着种种限制和问题，但是它有一个良好的特性，它和Java类型系统结合的十分紧密：每一个函数对象都对应一个接口类型。之所以说这个特性是良好的，是因为：</p>
<p>接口是Java类型系统的一部分<br>接口天然就拥有其运行时表示（Runtime representation）<br>接口可以通过Javadoc注释来表达一些非正式的协定（contract），例如，通过注释说明该操作应可交换（commutative）<br>上面提到的ActionListener接口只有一个方法，大多数回调接口都拥有这个特征：比如Runnable接口和Comparator接口。我们把这些只拥有一个方法的接口称为函数式接口。（之前它们被称为SAM类型，即单抽象方法类型（Single Abstract Method））</p>
<p>我们并不需要额外的工作来声明一个接口是函数式接口：编译器会根据接口的结构自行判断（判断过程并非简单的对接口方法计数：一个接口可能冗余的定义了一个Object已经提供的方法，比如toString()，或者定义了静态方法或默认方法，这些都不属于函数式接口方法的范畴）。不过API作者们可以通过@FunctionalInterface注解来显式指定一个接口是函数式接口（以避免无意声明了一个符合函数式标准的接口），加上这个注解之后，编译器就会验证该接口是否满足函数式接口的要求。</p>
<p>实现函数式类型的另一种方式是引入一个全新的结构化函数类型，我们也称其为“箭头”类型。例如，一个接收String和Object并返回int的函数类型可以被表示为(String, Object) -&gt; int。我们仔细考虑了这个方式，但出于下面的原因，最终将其否定：</p>
<p>它会为Java类型系统引入额外的复杂度，并带来结构类型（Structural Type）和指名类型（Nominal Type）的混用。（Java几乎全部使用指名类型）<br>它会导致类库风格的分歧——一些类库会继续使用回调接口，而另一些类库会使用结构化函数类型<br>它的语法会变得十分笨拙，尤其在包含受检异常（checked exception）之后<br>每个函数类型很难拥有其运行时表示，这意味着开发者会受到类型擦除（erasure）的困扰和局限。比如说，我们无法对方法m(T-&gt;U)和m(X-&gt;Y)进行重载（Overload）<br>所以我们选择了“使用已知类型”这条路——因为现有的类库大量使用了函数式接口，通过沿用这种模式，我们使得现有类库能够直接使用lambda表达式。例如下面是Java SE 7中已经存在的函数式接口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">java.lang.Runnable</div><div class="line">java.util.concurrent.Callable</div><div class="line">java.security.PrivilegedAction</div><div class="line">java.util.Comparator</div><div class="line">java.io.FileFilter</div><div class="line">java.beans.PropertyChangeListener</div></pre></td></tr></table></figure></p>
<p>除此之外，Java SE 8中增加了一个新的包：java.util.function，它里面包含了常用的函数式接口，例如：</p>
<p>Predicate<t>——接收T对象并返回boolean<br>Consumer<t>——接收T对象，不返回值<br>Function<t, r="">——接收T对象，返回R对象<br>Supplier<t>——提供T对象（例如工厂），不接收值<br>UnaryOperator<t>——接收T对象，返回T对象<br>BinaryOperator<t>——接收两个T对象，返回T对象<br>除了上面的这些基本的函数式接口，我们还提供了一些针对原始类型（Primitive type）的特化（Specialization）函数式接口，例如IntSupplier和LongBinaryOperator。（我们只为int、long和double提供了特化函数式接口，如果需要使用其它原始类型则需要进行类型转换）同样的我们也提供了一些针对多个参数的函数式接口，例如BiFunction<t, u,="" r="">，它接收T对象和U对象，返回R对象。</t,></t></t></t></t,></t></t></p>
<p>##lambda表达式</p>
<p>匿名类型最大的问题就在于其冗余的语法。有人戏称匿名类型导致了“高度问题”（height problem）：比如前面ActionListener的例子里的五行代码中仅有一行在做实际工作。</p>
<p>lambda表达式是匿名方法，它提供了轻量级的语法，从而解决了匿名内部类带来的“高度问题”。</p>
<p>下面是一些lambda表达式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(int x, int y) -&gt; x + y</div><div class="line">() -&gt; 42</div><div class="line">(String s) -&gt; &#123; System.out.println(s); &#125;</div></pre></td></tr></table></figure></p>
<p>第一个lambda表达式接收x和y这两个整形参数并返回它们的和；第二个lambda表达式不接收参数，返回整数’42’；第三个lambda表达式接收一个字符串并把它打印到控制台，不返回值。</p>
<p>lambda表达式的语法由参数列表、箭头符号-&gt;和函数体组成。函数体既可以是一个表达式，也可以是一个语句块：</p>
<p>表达式：表达式会被执行然后返回执行结果。<br>语句块：语句块中的语句会被依次执行，就像方法中的语句一样——<br>return语句会把控制权交给匿名方法的调用者<br>break和continue只能在循环中使用<br>如果函数体有返回值，那么函数体内部的每一条路径都必须返回值<br>表达式函数体适合小型lambda表达式，它消除了return关键字，使得语法更加简洁。</p>
<p>lambda表达式也会经常出现在嵌套环境中，比如说作为方法的参数。为了使lambda表达式在这些场景下尽可能简洁，我们去除了不必要的分隔符。不过在某些情况下我们也可以把它分为多行，然后用括号包起来，就像其它普通表达式一样。</p>
<p>下面是一些出现在语句中的lambda表达式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">FileFilter java = (File f) -&gt; f.getName().endsWith(&quot;*.java&quot;);</div><div class="line"></div><div class="line">String user = doPrivileged(() -&gt; System.getProperty(&quot;user.name&quot;));</div><div class="line"></div><div class="line">new Thread(() -&gt; &#123;</div><div class="line">  connectToService();</div><div class="line">  sendNotification();</div><div class="line">&#125;).start();</div></pre></td></tr></table></figure>
<h2 id="目标类型"><a href="#目标类型" class="headerlink" title="目标类型"></a>目标类型</h2><p>需要注意的是，函数式接口的名称并不是lambda表达式的一部分。那么问题来了，对于给定的lambda表达式，它的类型是什么？答案是：它的类型是由其上下文推导而来。例如，下面代码中的lambda表达式类型是ActionListener：</p>
<p>ActionListener l = (ActionEvent e) -&gt; ui.dazzle(e.getModifiers());<br>这就意味着同样的lambda表达式在不同上下文里可以拥有不同的类型：</p>
<p>Callable<string> c = () -&gt; “done”;</string></p>
<p>PrivilegedAction<string> a = () -&gt; “done”;<br>第一个lambda表达式() -&gt; “done”是Callable的实例，而第二个lambda表达式则是PrivilegedAction的实例。</string></p>
<p>编译器负责推导lambda表达式的类型。它利用lambda表达式所在上下文所期待的类型进行推导，这个被期待的类型被称为目标类型。lambda表达式只能出现在目标类型为函数式接口的上下文中。</p>
<p>当然，lambda表达式对目标类型也是有要求的。编译器会检查lambda表达式的类型和目标类型的方法签名（method signature）是否一致。当且仅当下面所有条件均满足时，lambda表达式才可以被赋给目标类型T：</p>
<p>T是一个函数式接口<br>lambda表达式的参数和T的方法参数在数量和类型上一一对应<br>lambda表达式的返回值和T的方法返回值相兼容（Compatible）<br>lambda表达式内所抛出的异常和T的方法throws类型相兼容<br>由于目标类型（函数式接口）已经“知道”lambda表达式的形式参数（Formal parameter）类型，所以我们没有必要把已知类型再重复一遍。也就是说，lambda表达式的参数类型可以从目标类型中得出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Comparator&lt;String&gt; c = (s1, s2) -&gt; s1.compareToIgnoreCase(s2);</div></pre></td></tr></table></figure>
<p>在上面的例子里，编译器可以推导出s1和s2的类型是String。此外，当lambda的参数只有一个而且它的类型可以被推导得知时，该参数列表外面的括号可以被省略：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FileFilter java = f -&gt; f.getName().endsWith(&quot;.java&quot;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">button.addActionListener(e -&gt; ui.dazzle(e.getModifiers()));</div></pre></td></tr></table></figure>
<p>这些改进进一步展示了我们的设计目标：“不要把高度问题转化成宽度问题。”我们希望语法元素能够尽可能的少，以便代码的读者能够直达lambda表达式的核心部分。</p>
<p>lambda表达式并不是第一个拥有上下文相关类型的Java表达式：泛型方法调用和“菱形”构造器调用也通过目标类型来进行类型推导：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">List&lt;String&gt; ls = Collections.emptyList();</div><div class="line">List&lt;Integer&gt; li = Collections.emptyList();</div><div class="line"></div><div class="line">Map&lt;String, Integer&gt; m1 = new HashMap&lt;&gt;();</div><div class="line">Map&lt;Integer, String&gt; m2 = new HashMap&lt;&gt;();</div></pre></td></tr></table></figure></p>
<ol>
<li>目标类型的上下文（Contexts for target typing）</li>
</ol>
<p>之前我们提到lambda表达式智能出现在拥有目标类型的上下文中。下面给出了这些带有目标类型的上下文：</p>
<p>变量声明<br>赋值<br>返回语句<br>数组初始化器<br>方法和构造方法的参数<br>lambda表达式函数体<br>条件表达式（? :）<br>转型（Cast）表达式<br>在前三个上下文（变量声明、赋值和返回语句）里，目标类型即是被赋值或被返回的类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Comparator&lt;String&gt; c;</div><div class="line">c = (String s1, String s2) -&gt; s1.compareToIgnoreCase(s2);</div><div class="line"></div><div class="line">public Runnable toDoLater() &#123;</div><div class="line">  return () -&gt; &#123;</div><div class="line">    System.out.println(&quot;later&quot;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>数组初始化器和赋值类似，只是这里的“变量”变成了数组元素，而类型是从数组类型中推导得知：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">filterFiles(new FileFilter[] &#123;</div><div class="line">              f -&gt; f.exists(), f -&gt; f.canRead(), f -&gt; f.getName().startsWith(&quot;q&quot;)</div><div class="line">            &#125;);</div></pre></td></tr></table></figure></p>
<p>方法参数的类型推导要相对复杂些：目标类型的确认会涉及到其它两个语言特性：重载解析（Overload resolution）和参数类型推导（Type argument inference）。</p>
<p>重载解析会为一个给定的方法调用（method invocation）寻找最合适的方法声明（method declaration）。由于不同的声明具有不同的签名，当lambda表达式作为方法参数时，重载解析就会影响到lambda表达式的目标类型。编译器会通过它所得之的信息来做出决定。如果lambda表达式具有显式类型（参数类型被显式指定），编译器就可以直接 使用lambda表达式的返回类型；如果lambda表达式具有隐式类型（参数类型被推导而知），重载解析则会忽略lambda表达式函数体而只依赖lambda表达式参数的数量。</p>
<p>如果在解析方法声明时存在二义性（ambiguous），我们就需要利用转型（cast）或显式lambda表达式来提供更多的类型信息。如果lambda表达式的返回类型依赖于其参数的类型，那么lambda表达式函数体有可能可以给编译器提供额外的信息，以便其推导参数类型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">List&lt;Person&gt; ps = ...</div><div class="line">Stream&lt;String&gt; names = ps.stream().map(p -&gt; p.getName());</div></pre></td></tr></table></figure></p>
<p>在上面的代码中，ps的类型是List<person>，所以ps.stream()的返回类型是Stream<person>。map()方法接收一个类型为Function<t, r="">的函数式接口，这里T的类型即是Stream元素的类型，也就是Person，而R的类型未知。由于在重载解析之后lambda表达式的目标类型仍然未知，我们就需要推导R的类型：通过对lambda表达式函数体进行类型检查，我们发现函数体返回String，因此R的类型是String，因而map()返回Stream<string>。绝大多数情况下编译器都能解析出正确的类型，但如果碰到无法解析的情况，我们则需要：</string></t,></person></person></p>
<p>使用显式lambda表达式（为参数p提供显式类型）以提供额外的类型信息<br>把lambda表达式转型为Function<person, string=""><br>为泛型参数R提供一个实际类型。（.<string>map(p -&gt; p.getName())）<br>lambda表达式本身也可以为它自己的函数体提供目标类型，也就是说lambda表达式可以通过外部目标类型推导出其内部的返回类型，这意味着我们可以方便的编写一个返回函数的函数：</string></person,></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Supplier&lt;Runnable&gt; c = () -&gt; () -&gt; &#123; System.out.println(&quot;hi&quot;); &#125;;</div></pre></td></tr></table></figure>
<p>类似的，条件表达式可以把目标类型“分发”给其子表达式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Callable&lt;Integer&gt; c = flag ? (() -&gt; 23) : (() -&gt; 42);</div></pre></td></tr></table></figure>
<p>最后，转型表达式（Cast expression）可以显式提供lambda表达式的类型，这个特性在无法确认目标类型时非常有用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// Object o = () -&gt; &#123; System.out.println(&quot;hi&quot;); &#125;; 这段代码是非法的</div><div class="line">Object o = (Runnable) () -&gt; &#123; System.out.println(&quot;hi&quot;); &#125;;</div></pre></td></tr></table></figure>
<p>除此之外，当重载的方法都拥有函数式接口时，转型可以帮助解决重载解析时出现的二义性。</p>
<p>目标类型这个概念不仅仅适用于lambda表达式，泛型方法调用和“菱形”构造方法调用也可以从目标类型中受益，下面的代码在Java SE 7是非法的，但在Java SE 8中是合法的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; ls = Collections.checkedList(new ArrayList&lt;&gt;(), String.class);</div><div class="line"></div><div class="line">Set&lt;Integer&gt; si = flag ? Collections.singleton(23) : Collections.emptySet();</div></pre></td></tr></table></figure>
<h2 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h2><p>在内部类中使用变量名（以及this）非常容易出错。内部类中通过继承得到的成员（包括来自Object的方法）可能会把外部类的成员掩盖（shadow），此外未限定（unqualified）的this引用会指向内部类自己而非外部类。</p>
<p>相对于内部类，lambda表达式的语义就十分简单：它不会从超类（supertype）中继承任何变量名，也不会引入一个新的作用域。lambda表达式基于词法作用域，也就是说lambda表达式函数体里面的变量和它外部环境的变量具有相同的语义（也包括lambda表达式的形式参数）。此外，’this’关键字及其引用在lambda表达式内部和外部也拥有相同的语义。</p>
<p>为了进一步说明词法作用域的优点，请参考下面的代码，它会把”Hello, world!”打印两遍：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Hello &#123;</div><div class="line">  Runnable r1 = () -&gt; &#123; System.out.println(this); &#125;</div><div class="line">  Runnable r2 = () -&gt; &#123; System.out.println(toString()); &#125;</div><div class="line"></div><div class="line">  public String toString() &#123;  return &quot;Hello, world&quot;; &#125;</div><div class="line"></div><div class="line">  public static void main(String... args) &#123;</div><div class="line">    new Hello().r1.run();</div><div class="line">    new Hello().r2.run();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>与之相类似的内部类实现则会打印出类似Hello$1@5b89a773和Hello$2@537a7706之类的字符串，这往往会使开发者大吃一惊。</p>
<p>基于词法作用域的理念，lambda表达式不可以掩盖任何其所在上下文中的局部变量，它的行为和那些拥有参数的控制流结构（例如for循环和catch从句）一致。</p>
<p>个人补充：这个说法很拗口，所以我在这里加一个例子以演示词法作用域：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int i = 0;</div><div class="line">int sum = 0;</div><div class="line">for (int i = 1; i &lt; 10; i += 1) &#123; //这里会出现编译错误，因为i已经在for循环外部声明过了</div><div class="line">  sum += i;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="变量捕获"><a href="#变量捕获" class="headerlink" title="变量捕获"></a>变量捕获</h2><p>在Java SE 7中，编译器对内部类中引用的外部变量（即捕获的变量）要求非常严格：如果捕获的变量没有被声明为final就会产生一个编译错误。我们现在放宽了这个限制——对于lambda表达式和内部类，我们允许在其中捕获那些符合有效只读（Effectively final）的局部变量。</p>
<p>简单的说，如果一个局部变量在初始化后从未被修改过，那么它就符合有效只读的要求，换句话说，加上final后也不会导致编译错误的局部变量就是有效只读变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Callable&lt;String&gt; helloCallable(String name) &#123;</div><div class="line">  String hello = &quot;Hello&quot;;</div><div class="line">  return () -&gt; (hello + &quot;, &quot; + name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对this的引用，以及通过this对未限定字段的引用和未限定方法的调用在本质上都属于使用final局部变量。包含此类引用的lambda表达式相当于捕获了this实例。在其它情况下，lambda对象不会保留任何对this的引用。</p>
<p>这个特性对内存管理是一件好事：内部类实例会一直保留一个对其外部类实例的强引用，而那些没有捕获外部类成员的lambda表达式则不会保留对外部类实例的引用。要知道内部类的这个特性往往会造成内存泄露。</p>
<p>尽管我们放宽了对捕获变量的语法限制，但试图修改捕获变量的行为仍然会被禁止，比如下面这个例子就是非法的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int sum = 0;</div><div class="line">list.forEach(e -&gt; &#123; sum += e.size(); &#125;);</div></pre></td></tr></table></figure>
<p>为什么要禁止这种行为呢？因为这样的lambda表达式很容易引起race condition。除非我们能够强制（最好是在编译时）这样的函数不能离开其当前线程，但如果这么做了可能会导致更多的问题。简而言之，lambda表达式对值封闭，对变量开放。</p>
<p>个人补充：lambda表达式对值封闭，对变量开放的原文是：lambda expressions close over values, not variables，我在这里增加一个例子以说明这个特性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int sum = 0;</div><div class="line">list.forEach(e -&gt; &#123; sum += e.size(); &#125;); // Illegal, close over values</div><div class="line"></div><div class="line">List&lt;Integer&gt; aList = new List&lt;&gt;();</div><div class="line">list.forEach(e -&gt; &#123; aList.add(e); &#125;); // Legal, open over variables</div></pre></td></tr></table></figure>
<p>lambda表达式不支持修改捕获变量的另一个原因是我们可以使用更好的方式来实现同样的效果：使用规约（reduction）。java.util.stream包提供了各种通用的和专用的规约操作（例如sum、min和max），就上面的例子而言，我们可以使用规约操作（在串行和并行下都是安全的）来代替forEach：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int sum = list.stream()</div><div class="line">              .mapToInt(e -&gt; e.size())</div><div class="line">              .sum();</div></pre></td></tr></table></figure>
<p>sum()等价于下面的规约操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int sum = list.stream()</div><div class="line">              .mapToInt(e -&gt; e.size())</div><div class="line">              .reduce(0 , (x, y) -&gt; x + y);</div></pre></td></tr></table></figure>
<p>规约需要一个初始值（以防输入为空）和一个操作符（在这里是加号），然后用下面的表达式计算结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0 + list[0] + list[1] + list[2] + ...</div></pre></td></tr></table></figure>
<p>规约也可以完成其它操作，比如求最小值、最大值和乘积等等。如果操作符具有可结合性（associative），那么规约操作就可以容易的被并行化。所以，与其支持一个本质上是并行而且容易导致race condition的操作，我们选择在库中提供一个更加并行友好且不容易出错的方式来进行累积（accumulation）。</p>
<p>##方法引用</p>
<p>lambda表达式允许我们定义一个匿名方法，并允许我们以函数式接口的方式使用它。我们也希望能够在已有的方法上实现同样的特性。</p>
<p>方法引用和lambda表达式拥有相同的特性（例如，它们都需要一个目标类型，并需要被转化为函数式接口的实例），不过我们并不需要为方法引用提供方法体，我们可以直接通过方法名称引用已有方法。</p>
<p>以下面的代码为例，假设我们要按照name或age为Person数组进行排序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class Person &#123;</div><div class="line">  private final String name;</div><div class="line">  private final int age;</div><div class="line"></div><div class="line">  public int getAge() &#123; return age; &#125;</div><div class="line">  public String getName() &#123;return name; &#125;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person[] people = ...</div><div class="line">Comparator&lt;Person&gt; byName = Comparator.comparing(p -&gt; p.getName());</div><div class="line">Arrays.sort(people, byName);</div></pre></td></tr></table></figure>
<p>在这里我们可以用方法引用代替lambda表达式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Comparator&lt;Person&gt; byName = Comparator.comparing(Person::getName);</div></pre></td></tr></table></figure>
<p>这里的Person::getName可以被看作为lambda表达式的简写形式。尽管方法引用不一定（比如在这个例子里）会把语法变的更紧凑，但它拥有更明确的语义——如果我们想要调用的方法拥有一个名字，我们就可以通过它的名字直接调用它。</p>
<p>因为函数式接口的方法参数对应于隐式方法调用时的参数，所以被引用方法签名可以通过放宽类型，装箱以及组织到参数数组中的方式对其参数进行操作，就像在调用实际方法一样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Consumer&lt;Integer&gt; b1 = System::exit;    // void exit(int status)</div><div class="line">Consumer&lt;String[]&gt; b2 = Arrays:sort;    // void sort(Object[] a)</div><div class="line">Consumer&lt;String&gt; b3 = MyProgram::main;  // void main(String... args)</div><div class="line">Runnable r = Myprogram::mapToInt        // void main(String... args)</div></pre></td></tr></table></figure>
<h2 id="方法引用的种类"><a href="#方法引用的种类" class="headerlink" title="方法引用的种类"></a>方法引用的种类</h2><p>方法引用有很多种，它们的语法如下：</p>
<p>静态方法引用：ClassName::methodName<br>实例上的实例方法引用：instanceReference::methodName<br>超类上的实例方法引用：super::methodName<br>类型上的实例方法引用：ClassName::methodName<br>构造方法引用：Class::new<br>数组构造方法引用：TypeName[]::new<br>对于静态方法引用，我们需要在类名和方法名之间加入::分隔符，例如Integer::sum。</p>
<p>对于具体对象上的实例方法引用，我们则需要在对象名和方法名之间加入分隔符：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Set&lt;String&gt; knownNames = ...</div><div class="line">Predicate&lt;String&gt; isKnown = knownNames::contains;</div></pre></td></tr></table></figure>
<p>这里的隐式lambda表达式（也就是实例方法引用）会从knownNames中捕获String对象，而它的方法体则会通过Set.contains使用该String对象。</p>
<p>有了实例方法引用，在不同函数式接口之间进行类型转换就变的很方便：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Callable&lt;Path&gt; c = ...</div><div class="line">Privileged&lt;Path&gt; a = c::call;</div></pre></td></tr></table></figure>
<p>引用任意对象的实例方法则需要在实例方法名称和其所属类型名称间加上分隔符：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Function&lt;String, String&gt; upperfier = String::toUpperCase;</div></pre></td></tr></table></figure>
<p>这里的隐式lambda表达式（即String::toUpperCase实例方法引用）有一个String参数，这个参数会被toUpperCase方法使用。</p>
<p>如果类型的实例方法是泛型的，那么我们就需要在::分隔符前提供类型参数，或者（多数情况下）利用目标类型推导出其类型。</p>
<p>需要注意的是，静态方法引用和类型上的实例方法引用拥有一样的语法。编译器会根据实际情况做出决定。</p>
<p>一般我们不需要指定方法引用中的参数类型，因为编译器往往可以推导出结果，但如果需要我们也可以显式在::分隔符之前提供参数类型信息。</p>
<p>和静态方法引用类似，构造方法也可以通过new关键字被直接引用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SocketImplFactory factory = MySocketImpl::new;</div></pre></td></tr></table></figure>
<p>如果类型拥有多个构造方法，那么我们就会通过目标类型的方法参数来选择最佳匹配，这里的选择过程和调用构造方法时的选择过程是一样的。</p>
<p>如果待实例化的类型是泛型的，那么我们可以在类型名称之后提供类型参数，否则编译器则会依照”菱形”构造方法调用时的方式进行推导。</p>
<p>数组的构造方法引用的语法则比较特殊，为了便于理解，你可以假想存在一个接收int参数的数组构造方法。参考下面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">IntFunction&lt;int[]&gt; arrayMaker = int[]::new;</div><div class="line">int[] array = arrayMaker.apply(10) // 创建数组 int[10]</div></pre></td></tr></table></figure></p>
<h2 id="默认方法和静态接口方法"><a href="#默认方法和静态接口方法" class="headerlink" title="默认方法和静态接口方法"></a>默认方法和静态接口方法</h2><p>lambda表达式和方法引用大大提升了Java的表达能力（expressiveness），不过为了使把代码即数据（code-as-data）变的更加容易，我们需要把这些特性融入到已有的库之中，以便开发者使用。</p>
<p>Java SE 7时代为一个已有的类库增加功能是非常困难的。具体的说，接口在发布之后就已经被定型，除非我们能够一次性更新所有该接口的实现，否则向接口添加方法就会破坏现有的接口实现。默认方法（之前被称为虚拟扩展方法或守护方法）的目标即是解决这个问题，使得接口在发布之后仍能被逐步演化。</p>
<p>这里给出一个例子，我们需要在标准集合API中增加针对lambda的方法。例如removeAll方法应该被泛化为接收一个函数式接口Predicate，但这个新的方法应该被放在哪里呢？我们无法直接在Collection接口上新增方法——不然就会破坏现有的Collection实现。我们倒是可以在Collections工具类中增加对应的静态方法，但这样就会把这个方法置于“二等公民”的境地。</p>
<p>默认方法利用面向对象的方式向接口增加新的行为。它是一种新的方法：接口方法可以是抽象的或是默认的。默认方法拥有其默认实现，实现接口的类型通过继承得到该默认实现（如果类型没有覆盖该默认实现）。此外，默认方法不是抽象方法，所以我们可以放心的向函数式接口里增加默认方法，而不用担心函数式接口的单抽象方法限制。</p>
<p>下面的例子展示了如何向Iterator接口增加默认方法skip：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">interface Iterator&lt;E&gt; &#123;</div><div class="line">  boolean hasNext();</div><div class="line">  E next();</div><div class="line">  void remove();</div><div class="line"></div><div class="line">  default void skip(int i) &#123;</div><div class="line">    for ( ; i &gt; 0 &amp;&amp; hasNext(); i -= 1) next();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据上面的Iterator定义，所有实现Iterator的类型都会自动继承skip方法。在使用者的眼里，skip不过是接口新增的一个虚拟方法。在没有覆盖skip方法的Iterator子类实例上调用skip会执行skip的默认实现：调用hasNext和next若干次。子类可以通过覆盖skip来提供更好的实现——比如直接移动游标（cursor），或是提供为操作提供原子性（Atomicity）等。</p>
<p>当接口继承其它接口时，我们既可以为它所继承而来的抽象方法提供一个默认实现，也可以为它继承而来的默认方法提供一个新的实现，还可以把它继承而来的默认方法重新抽象化。</p>
<p>除了默认方法，Java SE 8还在允许在接口中定义静态方法。这使得我们可以从接口直接调用和它相关的辅助方法（Helper method），而不是从其它的类中调用（之前这样的类往往以对应接口的复数命名，例如Collections）。比如，我们一般需要使用静态辅助方法生成实现Comparator的比较器，在Java SE 8中我们可以直接把该静态方法定义在Comparator接口中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public static &lt;T, U extends Comparable&lt;? super U&gt;&gt;</div><div class="line">    Comparator&lt;T&gt; comparing(Function&lt;T, U&gt; keyExtractor) &#123;</div><div class="line">  return (c1, c2) -&gt; keyExtractor.apply(c1).compareTo(keyExtractor.apply(c2));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="继承默认方法"><a href="#继承默认方法" class="headerlink" title="继承默认方法"></a>继承默认方法</h2><p>和其它方法一样，默认方法也可以被继承，大多数情况下这种继承行为和我们所期待的一致。不过，当类型或者接口的超类拥有多个具有相同签名的方法时，我们就需要一套规则来解决这个冲突：</p>
<p>类的方法（class method）声明优先于接口默认方法。无论该方法是具体的还是抽象的。<br>被其它类型所覆盖的方法会被忽略。这条规则适用于超类型共享一个公共祖先的情况。<br>为了演示第二条规则，我们假设Collection和List接口均提供了removeAll的默认实现，然后Queue继承并覆盖了Collection中的默认方法。在下面的implement从句中，List中的方法声明会优先于Queue中的方法声明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">class LinkedList&lt;E&gt; implements List&lt;E&gt;, Queue&lt;E&gt; &#123; ... &#125;</div></pre></td></tr></table></figure>
<p>当两个独立的默认方法相冲突或是默认方法和抽象方法相冲突时会产生编译错误。这时程序员需要显式覆盖超类方法。一般来说我们会定义一个默认方法，然后在其中显式选择超类方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">interface Robot implements Artist, Gun &#123;</div><div class="line">  default void draw() &#123; Artist.super.draw(); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>super前面的类型必须是有定义或继承默认方法的类型。这种方法调用并不只限于消除命名冲突——我们也可以在其它场景中使用它。</p>
<p>最后，接口在inherits和extends从句中的声明顺序和它们被实现的顺序无关。</p>
<h2 id="融会贯通"><a href="#融会贯通" class="headerlink" title="融会贯通"></a>融会贯通</h2><p>我们在设计lambda时的一个重要目标就是新增的语言特性和库特性能够无缝结合（designed to work together）。接下来，我们通过一个实际例子（按照姓对名字列表进行排序）来演示这一点：</p>
<p>比如说下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">List&lt;Person&gt; people = ...</div><div class="line">Collections.sort(people, new Comparator&lt;Person&gt;() &#123;</div><div class="line">  public int compare(Person x, Person y) &#123;</div><div class="line">    return x.getLastName().compareTo(y.getLastName());</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>冗余代码实在太多了！</p>
<p>有了lambda表达式，我们可以去掉冗余的匿名类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Collections.sort(people,</div><div class="line">                 (Person x, Person y) -&gt; x.getLastName().compareTo(y.getLastName()));</div></pre></td></tr></table></figure>
<p>尽管代码简洁了很多，但它的抽象程度依然很差：开发者仍然需要进行实际的比较操作（而且如果比较的值是原始类型那么情况会更糟），所以我们要借助Comparator里的comparing方法实现比较操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Collections.sort(people, Comparator.comparing((Person p) -&gt; p.getLastName()));</div></pre></td></tr></table></figure>
<p>在类型推导和静态导入的帮助下，我们可以进一步简化上面的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Collections.sort(people, comparing(p -&gt; p.getLastName()));</div></pre></td></tr></table></figure>
<p>我们注意到这里的lambda表达式实际上是getLastName的代理（forwarder），于是我们可以用方法引用代替它：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Collections.sort(people, comparing(Person::getLastName));</div></pre></td></tr></table></figure></p>
<p>最后，使用Collections.sort这样的辅助方法并不是一个好主意：它不但使代码变的冗余，也无法为实现List接口的数据结构提供特定（specialized）的高效实现，而且由于Collections.sort方法不属于List接口，用户在阅读List接口的文档时不会察觉在另外的Collections类中还有一个针对List接口的排序（sort()）方法。</p>
<p>默认方法可以有效的解决这个问题，我们为List增加默认方法sort()，然后就可以这样调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">people.sort(comparing(Person::getLastName));;</div></pre></td></tr></table></figure>
<p>此外，如果我们为Comparator接口增加一个默认方法reversed()（产生一个逆序比较器），我们就可以非常容易的在前面代码的基础上实现降序排序。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">people.sort(comparing(Person::getLastName).reversed());;</div></pre></td></tr></table></figure>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Java SE 8提供的新语言特性并不算多——lambda表达式，方法引用，默认方法和静态接口方法，以及范围更广的类型推导。但是把它们结合在一起之后，开发者可以编写出更加清晰简洁的代码，类库编写者可以编写更加强大易用的并行类库。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[VIM必备快捷键]]></title>
      <url>https://kiroswu.github.io/2016/09/19/vim_keyboard_shortcuts/</url>
      <content type="html"><![CDATA[<p><kbd>ta</kbd> 跳到下一个a 前面，配合d，dt) 一直删除到这行的)<br><kbd>fa</kbd> 跳到下一个a<br><kbd>CTRL-F</kbd> 向前一页 <kbd>CTRL-B</kbd> 向后一页<br><kbd>CTRL-D</kbd> 向下半页 <kbd>CTRL-U</kbd> 向上半页<br><kbd>ctrl+i</kbd> 跳转到函数、变量和#define<br><kbd>ctrl+i</kbd> 向前跳到前几次光标位置<br><kbd>ctrl+o</kbd> 向后跳到后几次光标位置</p>
<p><kbd>vi{</kbd> 选中{}中间的内容,不包括{}， 可以([{‘“&lt;<br><kbd>va{</kbd> 选中{}中间内容，包括{}</p>
<p><kbd>:e!</kbd>重新读进上次保存的此文件内容<br><kbd>:ab myname william_djj</kbd><br>以后再编辑时键入myname，然后空格或回车myname串就会被william_djj代替<br><kbd>:r !command</kbd> 在当前位置插入command结果<br><kbd>:r filename</kbd> 当前位置插入文件内容<br>不退出vim，直接执行命令，例如在perl文件中，直接执行不退出，<kbd>:!perl %</kbd> 。 如果前面已经执行过了，则重复前面的命令时，只需要<kbd>:!!</kbd><br>插入模式下<kbd>ctrl +r</kbd>，=算式，回车插入结果<br><kbd>% </kbd>跳转到相配对的括号，或流控<br><kbd>D</kbd> 表示删除从当前光标到光标所在行尾的内容.<br>删除某行后面的换行符号：在命令状态下，在某一行上按”J”键将Join下一行，呵呵<br><kbd>u</kbd> 撤销上次的操作，<kbd>ctrl+r</kbd>恢复上次的撤销。 </p>
<p><kbd>:n,$s/vivian/sky/g</kbd> 替换第 n 行开始到最后一行中每一行所有 vivian 为 sky<br>n 为数字，若 n 为 .，表示从当前行开始到最后一行<br>可以使用 # 作为分隔符，此时中间出现的 / 不会作为分隔符<br><kbd>:s#vivian/#sky/#</kbd> 替换当前行第一个 vivian/ 为 sky/</p>
<p><kbd>:f</kbd>查看当前文件<br><kbd>v</kbd>选择模式  ，<kbd>ctrl+v</kbd>块选择模式，<kbd>V</kbd>行选择模式</p>
<p><kbd>^</kbd> 行首<br><kbd>$</kbd>行尾<br><kbd>0</kbd> 第一个字符</p>
<p><kbd>y</kbd> 复制<br><kbd>d</kbd> 删除<br><kbd>x</kbd> 剪切<br><kbd>p</kbd> 粘贴</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Jvm虚拟机深入总结]]></title>
      <url>https://kiroswu.github.io/2016/08/20/JVM_machine/</url>
      <content type="html"><![CDATA[<h2 id="JVM内存区域"><a href="#JVM内存区域" class="headerlink" title="JVM内存区域"></a>JVM内存区域</h2><p>我们在编写程序时，经常会遇到OOM（out of Memory）以及内存泄漏等问题。为了避免出现这些问题，我们首先必须对JVM的内存划分有个具体的认识。JVM将内存主要划分为：方法区、虚拟机栈、本地方法栈、堆、程序计数器。JVM运行时数据区如下： </p>
<h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>程序计数器是线程私有的区域，很好理解嘛~，每个线程当然得有个计数器记录当前执行到那个指令。占用的内存空间小，可以把它看成是当前线程所执行的字节码的行号指示器。如果线程在执行Java方法，这个计数器记录的是正在执行的虚拟机字节码指令地址；如果执行的是Native方法，这个计数器的值为空（Undefined）。此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</p>
<h3 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h3><p>与程序计数器一样，Java虚拟机栈也是线程私有的。其生命周期与线程相同。如何理解虚拟机栈呢？本质上来讲，就是个栈。里面存放的元素叫栈帧，栈帧好像很复杂的样子，其实它很简单！它里面存放的是一个函数的上下文，具体存放的是执行的函数的一些数据。执行的函数需要的数据无非就是局部变量表（保存函数内部的变量）、操作数栈（执行引擎计算时需要），方法出口等等。</p>
<p>执行引擎每调用一个函数时，就为这个函数创建一个栈帧，并加入虚拟机栈。换个角度理解，每个函数从调用到执行结束，其实是对应一个栈帧的入栈和出栈。</p>
<p>注意这个区域可能出现的两种异常：一种是StackOverflowError，当前线程请求的栈深度大于虚拟机所允许的深度时，会抛出这个异常。制造这种异常很简单：将一个函数反复递归自己，最终会出现栈溢出错误（StackOverflowError）。另一种异常是OutOfMemoryError异常，当虚拟机栈可以动态扩展时（当前大部分虚拟机都可以），如果无法申请足够多的内存就会抛出OutOfMemoryError，如何制作虚拟机栈OOM呢，参考一下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public void stackLeakByThread()&#123;</div><div class="line">    while(true)&#123;</div><div class="line">        new Thread()&#123;</div><div class="line">            public void run()&#123;</div><div class="line">                while(true)&#123;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;.start()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码有风险，可能会导致操作系统假死，请谨慎使用~~~</p>
<h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>本地方法栈与虚拟机栈所发挥的作用很相似，他们的区别在于虚拟机栈为执行Java代码方法服务，而本地方法栈是为Native方法服务。与虚拟机栈一样，本地方法栈也会抛出StackOverflowError和OutOfMemoryError异常。</p>
<h3 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h3><p>Java堆可以说是虚拟机中最大一块内存了。它是所有线程所共享的内存区域，几乎所有的实例对象都是在这块区域中存放。当然，睡着JIT编译器的发展，所有对象在堆上分配渐渐变得不那么“绝对”了。</p>
<p>Java堆是垃圾收集器管理的主要区域。由于现在的收集器基本上采用的都是分代收集算法，所有Java堆可以细分为：新生代和老年代。在细致分就是把新生代分为：Eden空间、From Survivor空间、To Survivor空间。当堆无法再扩展时，会抛出OutOfMemoryError异常。</p>
<h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区存放的是类信息、常量、静态变量等。方法区是各个线程共享区域，很容易理解，我们在写Java代码时，每个线程度可以访问同一个类的静态变量对象。由于使用反射机制的原因，虚拟机很难推测那个类信息不再使用，因此这块区域的回收很难。另外，对这块区域主要是针对常量池回收，值得注意的是JDK1.7已经把常量池转移到堆里面了。同样，当方法区无法满足内存分配需求时，会抛出OutOfMemoryError。<br>制造方法区内存溢出，注意，必须在JDK1.6及之前版本才会导致方法区溢出，原因后面解释,执行之前，可以把虚拟机的参数-XXpermSize和-XX：MaxPermSize限制方法区大小。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list =new ArrayList&lt;String&gt;();</div><div class="line">int i =0;</div><div class="line">while(true)&#123;</div><div class="line">    list.add(String.valueOf(i).intern());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行后会抛出java.lang.OutOfMemoryError:PermGen space异常。<br>解释一下，String的intern()函数作用是如果当前的字符串在常量池中不存在，则放入到常量池中。上面的代码不断将字符串添加到常量池，最终肯定会导致内存不足，抛出方法区的OOM。</p>
<p>下面解释一下，为什么必须将上面的代码在JDK1.6之前运行。我们前面提到，JDK1.7后，把常量池放入到堆空间中，这导致intern()函数的功能不同，具体怎么个不同法，且看看下面代码：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">String str1 =new StringBuilder(&quot;hua&quot;).append(&quot;chao&quot;).toString();</div><div class="line">System.out.println(str1.intern()==str1);</div><div class="line"></div><div class="line">String str2=new StringBuilder(&quot;ja&quot;).append(&quot;va&quot;).toString();</div><div class="line">System.out.println(str2.intern()==str2);</div></pre></td></tr></table></figure></p>
<p>这段代码在JDK1.6和JDK1.7运行的结果不同。JDK1.6结果是：false,false ，JDK1.7结果是true, false。原因是：JDK1.6中，intern()方法会吧首次遇到的字符串实例复制到常量池中，返回的也是常量池中的字符串的引用，而StringBuilder创建的字符串实例是在堆上面，所以必然不是同一个引用，返回false。在JDK1.7中，intern不再复制实例，常量池中只保存首次出现的实例的引用，因此intern()返回的引用和由StringBuilder创建的字符串实例是同一个。为什么对str2比较返回的是false呢？这是因为，JVM中内部在加载类的时候，就已经有”java”这个字符串，不符合“首次出现”的原则，因此返回false。</p>
<h2 id="垃圾回收（GC）"><a href="#垃圾回收（GC）" class="headerlink" title="垃圾回收（GC）"></a>垃圾回收（GC）</h2><p>JVM的垃圾回收机制中，判断一个对象是否死亡，并不是根据是否还有对象对其有引用，而是通过可达性分析。对象之间的引用可以抽象成树形结构，通过树根（GC Roots）作为起点，从这些树根往下搜索，搜索走过的链称为引用链，当一个对象到GC Roots没有任何引用链相连时，则证明这个对象是不可用的，该对象会被判定为可回收的对象。</p>
<p>那么那些对象可作为GC Roots呢？主要有以下几种：</p>
<ul>
<li>1.虚拟机栈（栈帧中的本地变量表）中引用的对象。 </li>
<li>2.方法区中类静态属性引用的对象。 </li>
<li>3.方法区中常量引用的对象 </li>
<li>4.本地方法栈中JNI（即一般说的Native方法）引用的对象。</li>
</ul>
<p>另外，Java还提供了软引用和弱引用，这两个引用是可以随时被虚拟机回收的对象，我们将一些比较占内存但是又可能后面用的对象，比如Bitmap对象，可以声明为软引用货弱引用。但是注意一点，每次使用这个对象时候，需要显示判断一下是否为null，以免出错。</p>
<h2 id="三种常见的垃圾收集算法"><a href="#三种常见的垃圾收集算法" class="headerlink" title="三种常见的垃圾收集算法"></a>三种常见的垃圾收集算法</h2><ul>
<li>1,标记-清除算法</li>
</ul>
<p>首先，通过可达性分析将可回收的对象进行标记，标记后再统一回收所有被标记的对象，标记过程其实就是可达性分析的过程。这种方法有2个不足点：效率问题，标记和清除两个过程的效率都不高；另一个是空间问题，标记清除之后会产生大量的不连续的内存碎片。</p>
<ul>
<li>2, 复制算法</li>
</ul>
<p>为了解决效率问题，复制算法是将内存分为大小相同的两块，每次只使用其中一块。当这块内存用完了，就将还存活的对象复制到另一块内存上面。然后再把已经使用过的内存一次清理掉。这使得每次只对半个区域进行垃圾回收，内存分配时也不用考虑内存碎片情况。</p>
<p>但是，这代价实在是让人无法接受，需要牺牲一般的内存空间。研究发现，大部分对象都是“朝生夕死”，所以不需要安装1:1比例划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden空间和一块Survivor空间，默认比例为Eden：Survivor=8:1.新生代区域就是这么划分，每次实例在Eden和一块Survivor中分配，回收时，将存活的对象复制到剩下的另一块Survivor。这样只有10%的内存会被浪费，但是带来的效率却很高。当剩下的Survivor内存不足时，可以去老年代内存进行分配担保。如何理解分配担保呢，其实就是，内存不足时，去老年代内存空间分配，然后等新生代内存缓过来了之后，把内存归还给老年代，保持新生代中的Eden：Survivor=8:1.另外，两个Survivor分别有自己的名称：From Survivor、To Survivor。二者身份经常调换，即有时这块内存与Eden一起参与分配，有时是另一块。因为他们之间经常相互复制。</p>
<ul>
<li>3.标记-整理算法</li>
</ul>
<p>标记整理算法很简单，就是先标记需要回收的对象，然后把所有存活的对象移动到内存的一端。这样的好处是避免了内存碎片。</p>
<h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><p>类从被加载到虚拟机内存开始，到卸载出内存为止，整个生命周期包括：加载、验证、准备、解析、初始化、使用和卸载七个阶段。</p>
<p>其中加载、验证、准备、初始化、和卸载这5个阶段的顺序是确定的。而解析阶段不一定：它在某些情况下可以在初始化阶段之后再开始，这是为了支持Java的运行时绑定。</p>
<p>关于初始化：JVM规范明确规定，有且只有5中情况必须执行对类的初始化（加载、验证、准备自然再此之前要发生）： </p>
<ul>
<li>1.遇到new、getstatic、putstatic、invokestatic，如果类没有初始化，则必须初始化，这几条指令分别是指：new新对象、读取静态变量、设置静态变量，调用静态函数。 </li>
<li>2.使用java.lang.reflect包的方法对类进行反射调用时，如果类没初始化，则需要初始化 </li>
<li>3.当初始化一个类时，如果发现父类没有初始化，则需要先触发父类初始化。 </li>
<li>4.当虚拟机启动时，用户需要制定一个执行的主类（包含main函数的类），虚拟机会先初始化这个类。 </li>
<li>5.但是用JDK1.7启的动态语言支持时，如果一个MethodHandle实例最后解析的结果是REF_getStatic、REF_putStatic、Ref_invokeStatic的方法句柄时，并且这个方法句柄所对应的类没有进行初始化，则要先触发其初始化。</li>
</ul>
<p>另外要注意的是：通过子类来引用父类的静态字段，不会导致子类初始化：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class SuperClass&#123;</div><div class="line">    public static int value=123;</div><div class="line">    static&#123;</div><div class="line">        System.out.printLn(&quot;SuperClass init!&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class SubClass extends SuperClass&#123;</div><div class="line">    static&#123;</div><div class="line">        System.out.println(&quot;SubClass init!&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Test&#123;</div><div class="line"></div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        System.out.println(SubClass.value);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后只会打印：SuperClass init!<br>对应静态变量，只有直接定义这个字段的类才会被初始化，因此通过子类类引用父类中定义的静态变量只会触发父类初始化而不会触发子类初始化。</p>
<p>通过数组定义来引用类，不会触发此类的初始化：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class Test&#123;</div><div class="line"></div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        SuperClass[] sca=new SuperClass[10];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>常量会在编译阶段存入调用者的常量池，本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类初始化，示例代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class ConstClass&#123;</div><div class="line">    public static final String HELLO_WORLD=&quot;hello world&quot;;</div><div class="line">    static &#123;</div><div class="line">        System.out.println(&quot;ConstClass init!&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Test&#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line"></div><div class="line">        System.out.print(ConstClass.HELLO_WORLD);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码不会出现ConstClass init!</p>
<h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>加载过程主要做以下3件事<br>1.通过一个类的全限定名称来获取此类的二进制流<br>2.强这个字节流所代表的静态存储结构转化为方法区的运行时数据结构<br>3.在内存中生成一个代表这个类的java.lang.Class对象,作为方法区这个类的各种数据访问入口。</p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>这个阶段主要是为了确保Class文件字节流中包含信息符合当前虚拟机的要求，并且不会出现危害虚拟机自身的安全。</p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都在方法区中分配。首先，这个时候分配内存仅仅包括类变量（被static修饰的变量），而不包括实例变量。实例变量会在对象实例化时随着对象一起分配在java堆中。其次这里所说的初始值“通常情况下”是数据类型的零值，假设一个类变量定义为</p>
<p>public static int value=123;<br>那变量value在准备阶段后的初始值是0，而不是123，因为还没有执行任何Java方法，而把value赋值为123是在程序编译后，存放在类构造函数&lt; clinit &gt;()方法中。<br>解析</p>
<p>解析阶段是把虚拟机中常量池的符号引用替换为直接引用的过程。</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>类初始化时类加载的最后一步，前面类加载过程中，除了加载阶段用户可以通过自定义类加载器参与以外，其余动作都是虚拟机主导和控制。到了初始化阶段，才是真正执行类中定义Java程序代码。</p>
<p>准备阶段中，变量已经赋过一次系统要求的初始值，而在初始化阶段，根据程序员通过程序制定的主观计划初始化类变量。初始化过程其实是执行类构造器&lt; clinit &gt;()方法的过程。</p>
<p>&lt; clinit &gt;()方法是由编译器自动收集类中所有类变量的赋值动作和静态语句块中的语句合并产生的。收集的顺序是按照语句在源文件中出现的顺序。静态语句块中只能访问定义在静态语句块之前的变量，定义在它之后的变量可以赋值，但不能访问。如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class Test&#123;</div><div class="line">    static&#123;</div><div class="line">        i=0;//給变量赋值，可以通过编译</div><div class="line">        System.out.print(i);//这句编译器会提示：“非法向前引用”</div><div class="line">    &#125;</div><div class="line">    static int i=1;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&lt; clinit &gt;()方法与类构造函数（或者说实例构造器&lt; init &gt;()）不同，他不需要显式地调用父类构造器，虚拟机会保证子类的&lt; clinit &gt;()方法执行之前，父类的&lt; clinit &gt;()已经执行完毕。</p>
]]></content>
    </entry>
    
  
  
</search>
